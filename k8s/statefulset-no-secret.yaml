apiVersion: v1
kind: Service
metadata:
  name: ldp-mysql
  labels:
    app: ldp-mysql-lab
spec:
  selector: # 匹配
    app: ldp
    tier: mysql
  clusterIP: None
  ports:
    - port: 3306
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql-stateful-set
  labels:
    app: ldp-mysql-stateful-set
spec:
  serviceName: ldp-mysql
  selector:
    matchLabels:
      app: ldp
      tier: mysql
  template:
    metadata:
      labels:
        app: ldp
        tier: mysql
    spec:
      containers:
        - image: mysql:8.0
          name: mysql
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "123456"
            - name: MYSQL_DATABASE
              value: ldp
            - name: MYSQL_USER
              value: zr
            - name: MYSQL_PASSWORD
              value: "123456"
          ports:
            - containerPort: 3306
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: mysql-persistent-storage
      spec:
        storageClassName: fast
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: fast
provisioner: k8s-sigs.io/nfs-subdir-external-provisioner
parameters:
  readOnly: "false"
  path: /data/k8s
  server: 10.211.55.7
# https://blog.51cto.com/u_93011/10139111
# pvc 存在数据来，不能修改 第一次与第二次的初始化参数不一样。因为会对数据产生影响
#  nfs 安装  rpcbind  nfs-utils
# 服务启动  systemctl enable rpcbind     nfs-utils 需要启动这个 nfs-utils.service 网上有不是这个文件的。
# 配置 /etc/export
# kubectl get  pod  -n nfs-client-provisioner
#  StatefulSet 使用  secretKeyRef 存在bug
#  StorageClass volumeClaimTemplates 可以动态声明 pvc,pv,他们可以使用
# k8s-sigs.io/nfs-subdir-external-provisioner 驱动制作 。到 GitHub nfs-subdir-external-provisioner 仓库克隆仓库。
# 然后给 查看  跟目录 .github/workflows  release.yml 文件  on 为 action的出发规则。 文件是把镜像推送到  quay.io 仓库
# 制备好 镜像。使用仓库下面的  deploy 文件 里面的  kustomization.yaml 部署驱动（class.yaml是一个测试的 storageClass）可以只运行
# rbac.yaml deployment.yaml  objects 文件是拆细的对象，可以学习
# on:
#  push:
#    tags:
#      - 'gh-v*.*.*'
